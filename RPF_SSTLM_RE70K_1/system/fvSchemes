/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2212                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         Euler;
}

gradSchemes
{
    default         Gauss linear;

    limited         cellLimited Gauss linear 1;
    grad(U)         $limited;
    grad(k)         $limited;
    grad(omega)     $limited;
    grad(subsetU)   $limited;
    grad(gammaInt)  $limited;
    grad(ReThetat)  $limited;

}

divSchemes
{
    default         none;

    div(phi,U)      Gauss limitedLinearV 1;
    div(U)          Gauss linear;

    div(phid,p)     Gauss limitedLinear 1;
    div(phiv,p)     Gauss linear;

    div(phi,h)      Gauss limitedLinear 1;
    energy          bounded Gauss linearUpwind limited;
    div(phi,e)      $energy;
    div(phi,K)      $energy;
    div(phi,Ekp)    $energy;

    turbulence      bounded Gauss upwind;
    div(phi,k)      $turbulence;
    div(phi,omega)  $turbulence;
    div(phi,gammaInt)  $turbulence;
    div(phi,ReThetat)  $turbulence;

    div((phi|interpolate(rho)),p)  bounded Gauss upwind;

    turbulence      Gauss limitedLinear 1;
    div(phi,R)      $turbulence;
    div((rho*R))    Gauss linear;
    div(R)          Gauss linear;

    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
}

laplacianSchemes
{
    default         Gauss linear orthogonal;
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{
    default         orthogonal;
}

wallDist
{
    method          meshWave;
}


// ************************************************************************* //
